You are an expert system configuration builder. Your task is to generate a valid `agentic_tools.toml` configuration file for a new project based on the analysis provided below.

**Project Analysis:**
```
{structured_context}
```

**Instructions:**
1.  Analyze the project information to determine key settings.
2.  Use the detected languages and dependencies to configure source directories, file extensions, and linter commands.
3.  If the primary language is Python, configure linters like `ruff`, `mypy`, and `black`. If it's another language, suggest appropriate linters (e.g., `gofmt` for Go, `eslint` for JavaScript).
4.  Populate all sections of the TOML file. Do not leave any sections blank.
5.  Your final output MUST be only the raw TOML configuration content, without any explanations or markdown code fences.

**TOML Template to Populate:**

```toml
# Master configuration for the new project
[new-project]
project_name = "New Project Name"
project_description = "A concise description of the new project."

# Configure source paths based on the file tree analysis.
source = ["src"] # Or ["lib"], ["app"], etc.
design_docs = ["docs/DESIGN.md"]
project_directories = ["src", "docs", "tests"] # Adjust based on analysis

# Configure file extensions based on detected languages.
include_extensions = [".py", ".md"] # e.g., [".go"], [".js", ".css"]
exclude_files = ["__init__.py"]
exclude_directories = [".git", "__pycache__", "venv", ".venv", "node_modules"]

# Linter configuration based on detected language.
[new-project.linters]
# Example for Python:
ruff = ["ruff", "check", "--no-fix", "src/"]
mypy = ["mypy", "."]
black = ["black", "--check", "."]

# Default agent configurations. These can be customized later.
[new-project.architect]
model_name = "gemini-2.5-pro"
model_provider = "google"
api_key = "GEMINI_API_KEY_ARCHITECT"
# ... other agent settings

[new-project.developer]
model_name = "gemini-pro-latest"
model_provider = "google"
api_key = "GEMINI_API_KEY_DEVELOPER"
# ... other agent settings

# Add other standard agent configurations like commentator, approver, etc.
```
