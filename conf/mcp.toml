# File: conf/mcp.toml

[multi-agent-mcp]
project_name = "Multi-Agent-MCP"
project_description = "Agentic toolchain for architecting, designing, validating, and approving code via chained tools."

[multi-agent-mcp.inference_providers]
# Global provider registry and priority order
providers = ["google", "groq", "cerebras", "sambanova"]

#####################################################################
# Architect
[multi-agent-mcp.architect]
prompt = """
You are an expert software architect. Research inputs, analyze constraints, and produce a simple, explicit architecture and plan that adheres to the Design Principles and LLM Coding Standards.
"""
model_name = "qwen-3-235b Instruct"
temperature = 0.5
description = "Researches and plans system architecture"
model_providers = ["cerebras"]
alternative_model = "gpt-oss-120b"
alternative_model_provider = ["groq", "sambanova"]

#####################################################################
# Designer
[multi-agent-mcp.designer]
prompt = """
You are a software designer. Produce concrete, testable designs from architectural guidelines, keeping components simple and responsibilities singular.
"""
model_name = "qwen-3-235b Thinking"
temperature = 0.4
description = "Designs system components"
model_providers = ["cerebras"]
alternative_model = "gpt-oss-120b"
alternative_model_provider = ["groq", "sambanova"]

#####################################################################
# Developer
[multi-agent-mcp.developer]
prompt = """
You are a software developer. Implement the designer's steps with clean, well-documented, type-safe code that passes linters and tests.
"""
model_name = "qwen-3-coder-480b"
temperature = 0.3
description = "Implements designed components"
model_providers = ["cerebras"]
alternative_model = "gpt-oss-120b"
alternative_model_provider = ["groq", "sambanova"]

#####################################################################
# Debugger
[multi-agent-mcp.debugger]
prompt = """
You are a debugger. Identify minimal, precise fixes that make the code correct, simple, and standards-compliant.
"""
model_name = "gpt-oss-120b"
temperature = 0.2
description = "Debugs implementations"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.5-flash"
alternative_model_provider = ["google"]

#####################################################################
# Validator
[multi-agent-mcp.validation]
prompt = """
You are a validator. Verify that fixes are correct and that requirements and standards are fully met.
"""
model_name = "gpt-oss-120b"
temperature = 0.1
description = "Validates fixes"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.5-flash"
alternative_model_provider = ["google"]

#####################################################################
# Triager
[multi-agent-mcp.triager]
prompt = """
You are a triager. Identify repeated issues, categorize, prioritize, and propose resolution strategies.
"""
model_name = "qwen-3-32b"
temperature = 0.2
description = "Triages repeated issues"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.0-flash"
alternative_model_provider = ["google"]

#####################################################################
# Writer
[multi-agent-mcp.writer]
prompt = """
You are a technical writer. Update and improve documentation to reflect the current implementation and standards.
"""
model_name = "gpt-oss-120b"
temperature = 0.3
description = "Updates documentation"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.5-flash"
alternative_model_provider = ["google"]

#####################################################################
# Version Control
[multi-agent-mcp.version_control]
prompt = """
You are a version control expert. Perform atomic, auditable Git operations with clear messages and branches.
"""
model_name = "qwen-3-32b"
temperature = 0.1
description = "Handles Git operations"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.0-flash"
alternative_model_provider = ["google"]

#####################################################################
# Grapher
[multi-agent-mcp.grapher]
prompt = """
You are a diagram expert. Generate accurate Mermaid diagrams and visuals for systems and processes.
"""
model_name = "qwen-3-32b"
temperature = 0.3
description = "Creates diagrams"
model_providers = ["groq", "cerebras", "sambanova"]
alternative_model = "models/gemini-2.0-flash"
alternative_model_provider = ["google"]

#####################################################################
# Auditor
[multi-agent-mcp.auditor]
prompt = """
You are an auditor. Confirm linting, testing, and quality standards are fully met before commit.
"""
model_name = "DeepSeek-V3.1"
temperature = 0.1
description = "Audits code pre-commit"
model_providers = ["sambanova"]
alternative_model = "gpt-oss-120b"
alternative_model_provider = ["groq", "cerebras"]

#####################################################################
# Approver (final gate)
[multi-agent-mcp.approver]
prompt = """
You are the final gatekeeper in a software development pipeline. You will be given a complete context including design documents and recent code changes.

Return ONLY a single, valid JSON object with this exact structure:
{
  "decision": "APPROVED" | "CHANGES_REQUESTED",
  "summary": "string",
  "positive_points": ["string"],
  "negative_points": ["string"],
  "required_actions": ["string"]
}
"""
model_name = "models/gemini-2.5-pro"
temperature = 0.1
description = "Final approval decision"
model_providers = ["google"]
project_root = "PWD"

# Context assembly policy
recent_minutes = 10
src_dir = "src"
include_extensions = [".py", ".rs", ".go", ".ts", ".tsx", ".js", ".json", ".md", ".toml", ".yml", ".yaml"]
exclude_dirs = [".git", ".github", ".gitlab", "node_modules", "venv", ".venv", "dist", "build", "target", "__pycache__"]
max_file_bytes = 262144
max_total_bytes = 1048576

# Explicit doc paths (optional): used if files exist
docs_paths = ["DESIGN_PRINCIPLES_GUIDE.md", "CODING_FOR_LLMs.md"]

# Fallback discovery when explicit docs missing or renamed
[multi-agent-mcp.approver.doc_discovery]
enabled = true
patterns = [
  "*design*principle*.md",
  "*principle*.md",
  "*coding*llm*.md",
  "*coding*standard*.md",
  "*llm*code*.md",
]
[[multi-agent-mcp.approver.doc_discovery.signal_groups]]
name = "design_principles"
keywords = ["foundational design principles", "core principles", "simplicity is non-negotiable", "single responsibility", "explicit over implicit"]
[[multi-agent-mcp.approver.doc_discovery.signal_groups]]
name = "llm_coding_standards"
keywords = ["coding standards for llm-generated code", "llm-generated code", "type hints", "error handling", "determinism", "security-by-default"]
max_docs = 2
max_doc_bytes = 262144

# Alternative model routing
alternative_model = "gpt-oss-120b"
alternative_model_provider = ["groq", "cerebras"]
