# This is the master configuration file for the Agentic Tools project.
# It centralizes all settings for agents, workflows, and tools,
# adhering to the principle of separating configuration from code.

# =============================================================================
# MASTER CONFIGURATION
# =============================================================================
[agentic-tools]
project_name = "Agentic Tools"
project_description = "An agentic toolchain for architecting, designing, validating, and approving code via chained, specialized AI agents."

# Source code and documentation paths used for context gathering.
source = ["src"]
docs = "docs"
design_docs = ["docs/DESIGN_PRINCIPLES_GUIDE.md", "docs/CODING_STANDARDS.md"]
tests_directory = ["tests"]
project_directories = ["conf", "docs", "src"]

# A list of common project files to be included as context for certain agents.
common_project_files = [
    "README.md",
    "main.py",
    "pyproject.toml",
    "conf/agentic_tools.toml"
]

# File processing rules.
include_extensions = [".py", ".md", ".toml"]
exclude_files = ["__init__.py"]
exclude_directories = [
    ".git",
    ".github",
    ".idea",
    "__pycache__",
    "venv",
    ".venv",
    "dist",
    "build",
    "target",
]
max_file_bytes = 26214400 # 25 MiB limit per file to avoid excessive memory usage.

# Command for generating git diffs.
# Note: The command must start with "git" itself.
# The default setting is configured to review all changes in the working tree since the last commit.
git_diff_command = ["diff", "HEAD", "--patch-with-raw", "--minimal", "--patience", ":!uv.lock", ":!MANIFEST.in"]


# =============================================================================
# MEMORY & VECTOR DATABASE CONFIGURATION
# =============================================================================
[agentic-tools.memory]
enabled = true
collection_name = "agent_memory"
embedding_model = "mixedbread-ai/mxbai-embed-large-v1"
embedding_size = 1024
qdrant_url = "http://localhost:6333"
timeout = 30
total_memories_to_retrieve = 20
device = "cuda" # Device for FastEmbed (e.g., "cuda", "cpu").

# HNSW search parameter for balancing accuracy vs. speed.
search_hnsw_ef = 128

# Weights for time-based memory retrieval decay.
hourly_retrieval_weight = 0.0
daily_retrieval_weight = 0.0
weekly_retrieval_weight = 0.0
two_weeks_retrieval_weight = 0.0
monthly_retrieval_weight = 0.0
ninety_days_retrieval_weight = 0.0
one_eighty_days_retrieval_weight = 0.0
three_sixty_days_retrieval_weight = 0.0
knowledge_bank_retrieval_weight = 1.0

# Qdrant HNSW configuration for on-disk storage and high precision.
[agentic-tools.memory.hnsw_config]
on_disk = true
m = 64
ef_construct = 512
max_indexing_threads = -1 # Use all available CPU cores.

# Qdrant optimizer settings for performance.
[agentic-tools.memory.optimizers_config]
indexing_threshold = 10
flush_interval_sec = 5
vacuum_min_vector_number = 100
max_optimization_threads = -1 # Use all available CPU cores.
default_segment_number = 2

# Qdrant Write-Ahead-Log configuration.
[agentic-tools.memory.wal_config]
wal_capacity_mb = 64

# Qdrant quantization settings for memory optimization.
[agentic-tools.memory.quantization_config]
scalar_type = "int8"
quantile = 0.99
always_ram = true

# Configuration for the reranker model to improve search result relevance.
[agentic-tools.memory.reranker]
enabled = true
model_name = "jinaai/jina-reranker-v2-base-multilingual"

[agentic-tools.memory.sparse_vectors_config]
sparse = {}


# =============================================================================
# WORKFLOW CONFIGURATIONS
# =============================================================================
[agentic-tools.code_quality_enforcer]
# The maximum number of times the 'developer' agent will be invoked to fix validation errors for a single file.
max_fix_attempts = 3
# If true, the workflow will first validate files and skip any that are already 'dirty' (fail validation).
run_pre_validation = true

[agentic-tools.knowledge_bank_ingestion]
# The directory containing documents to be ingested into the vector database.
source_directory = "../knowledge_bank"
# The LLM model used for summarizing document content.
model = "gemini-2.5-flash"
# The name of the environment variable holding the API key for the summarization LLM.
google_api_key_name = "GEMINI_API_KEY_KNOWLEDGE_INGESTION"
# A tuple of file extensions that the ingestion script will look for.
supported_extensions = [".json", ".md", ".pdf"]
# The prompt used to guide the LLM in summarizing document content.
prompt = '''
You are an expert technical writer. Your task is to process the following document content.
Create a detailed, comprehensive, and high-quality text that captures the key information, purpose, and main topics of the document.
The output should be suitable for providing high-level context in a vector database search.

Your response must be a single JSON object with the following structure:
{
  "title": "<A concise and accurate title for the document>",
  "short_summary": "<A one or two sentence summary of the document's purpose>",
  "content": "<A detailed and comprehensive write-up of the document's key information>",
  "tags": ["<A list of relevant keywords or tags>"]
}
'''
# The target size for text chunks before embedding.
chunk_size = 1024
# The number of characters to overlap between consecutive chunks.
chunk_overlap = 200
# The number of points (chunks) to upsert to Qdrant in a single batch.
qdrant_batch_size = 128
# The maximum number of files to process concurrently.
concurrency_limit = 5

# =============================================================================
# AGENT CONFIGURATIONS
# =============================================================================

[agentic-tools.architect]
name = "architect"
description = "A senior architect that creates the architecture and planning for a given task, adhering to design principles."
model_name = "gemini-2.5-pro"
model_provider = "google"
api_key = "GEMINI_API_KEY_ARCHITECT"
temperature = 0.3
skills = ["software architecture", "system design", "problem decomposition", "technical planning", "adherence to design principles"]
prompt = '''
You are a senior expert Software and Hardware Architect.
Your task is to create the architecture and planning for the given problem.
You must adhere strictly to the provided Design Principles.
'''
[agentic-tools.expert]
name = "expert"
description = "An expert that leverages the knowledge base to answer questions and provide insights."
model_name = "gemini-2.5-pro"
model_provider = "google"
api_key = "GEMINI_API_KEY_EXPERT"
temperature = 0.1
skills = ["knowledge retrieval", "information synthesis", "contextual analysis", "clear communication", "expert software engineer", "system design"]
prompt = '''
You are an expert leveraging a comprehensive knowledge base.
Your task is to provide clear and concise answers based on the retrieved context.
You can be provided with a file, chat, or other information.
'''

[agentic-tools.expert.memory]
# Weights for time-based memory retrieval decay.
hourly_retrieval_weight = 0.0
daily_retrieval_weight = 0.0
weekly_retrieval_weight = 0.0
two_weeks_retrieval_weight = 0.0
monthly_retrieval_weight = 0.0
ninety_days_retrieval_weight = 0.0
one_eighty_days_retrieval_weight = 0.0
three_sixty_days_retrieval_weight = 0.0
knowledge_bank_retrieval_weight = 1.0


[agentic-tools.developer]
name = "developer"
description = "An expert software engineer that can write, debug, and fix code based on instructions and error messages."
model_name = "gemini-pro-latest"
model_provider = "google"
api_key = "GEMINI_API_KEY_DEVELOPER"
temperature = 0.0
skills = ["expert python developer", "debugging and code analysis", "adherence to mypy, ruff, and black standards", "problem decomposition", "meticulous attention to detail"]
prompt = '''
You are the 'developer', an expert software engineer.
You are provided with a single source code file to refactor, optimize, and enhance.
Your goal is to produce a complete, working file that strictly adheres to the provided Design Principles and Python Coding Standards.
ALWAYS USE THE LATEST LIBRARY SPECIFICATIONS.
'''



[agentic-tools.commentator]
name = "commentator"
description = "Reviews and updates comments, docstrings, and organizes imports in a single file. It must operate as a pure text transformer and MUST NOT modify functional code."
model_name = "gemini-flash-latest"
model_provider = "google"
api_key = "GEMINI_API_KEY_COMMENTATOR"
temperature = 0.1
skills = ["senior software architect", "expert technical writer", "code readability and maintainability", "strict adherence to coding standards", "python style guides (PEP 8, PEP 257)", "import organization and management", "meticulous attention to detail"]
prompt = '''
You are the 'commentator', an expert Senior Software Architect with a passion for creating exceptionally clear, maintainable, and self-documenting code. Your sole purpose is to improve the documentation, comments, and import structure of a given source file.

## THE GOLDEN RULE: DO NOT MODIFY FUNCTIONAL CODE

Your most important instruction is this: **You are strictly forbidden from modifying any functional code.**
- You MUST NOT change variable names, function logic, control flow, or algorithms.
- You MUST NOT refactor code, even if you see a potential improvement.
- Your entire operation is confined to comments, docstrings, and import statements.
- Before returning your response, you MUST perform a final check to ensure no executable code has been altered from the original.

## Your Mandate

You will receive the full content of a single source file. You must review it and return the complete, updated file content after performing the following four tasks in order:

### 1. Ensure a High-Quality File-Level Docstring/Comment
The file MUST begin with a comprehensive comment or docstring.
- It must clearly explain the file's single responsibility and its role within the larger system.
- If one exists, improve it. If one is missing, create it.

### 2. Review and Perfect All Docstrings (Classes, Functions, Methods)
Analyze every docstring for every class, function, and method.
- **Clarity and Purpose:** Ensure each docstring clearly explains the 'why' (the purpose and design rationale) and the 'what' (its parameters, behavior, and return value).
- **Completeness:** Add any missing docstrings.
- **Consistency:** Ensure the style and format are consistent with modern documentation standards for the language.

### 3. Refine All Inline Comments
Analyze every inline comment (`#` in Python, `//` in Go, etc.).
- **Remove Redundant Comments:** Delete comments that merely state what the code does (e.g., `# increment counter`). The code should speak for itself.
- **Add 'Why' Comments:** Add comments to explain the 'why' behind complex, non-obvious, or critical lines of code. Explain the business logic, trade-offs, or reasons for a specific implementation choice.

### 4. Organize and Clean All Imports
Analyze the import statements at the top of the file.
- **Remove Unused Imports:** Identify and delete any imports that are not used in the file.
- **Group and Sort Imports:** Reorganize the imports into three distinct, alphabetized groups, separated by a blank line:
    1.  Standard Library imports (e.g., `os`, `sys`, `json`).
    2.  Third-Party Library imports (e.g., `requests`, `qdrant_client`).
    3.  Local Application/Module imports (e.g., `from src.tools.shell_tools import ShellTools`).
'''

[agentic-tools.approver]
name = "approver"
description = "A senior architect that reviews code changes (git diffs) against design documents and decides whether to approve them."
model_name = "gemini-2.5-pro"
model_provider = "google"
api_key = "GEMINI_API_KEY_APPROVER"
temperature = 0.1
skills = ["code review", "quality assurance", "decision making", "technical analysis", "standards compliance", "risk assessment", "context analysis"]
prompt = '''
You are a senior software engineer reviewing a git diff.
You will be given a complete context including design documents and the code changes.
Review the changes against the core design principles provided to you.

Return ONLY a single, valid JSON object with this exact structure:
{
  "decision": "APPROVED" | "CHANGES_REQUESTED",
  "summary": "A concise summary of your decision and reasoning.",
  "positive_points": ["A list of specific strengths of the change."],
  "negative_points": ["A list of specific weaknesses or concerns."],
  "required_actions": ["A list of explicit actions the developer must take. (Empty if approved)"],
  "commit_message_if_approved": ["A multi-line conventional commit message. (Empty if changes are requested)"]
}
'''

[agentic-tools.readme_writer]
name = "readme_writer"
description = "A technical writer that generates or updates the project's README.md file based on the current source code and project structure."
model_name = "gemini-flash-latest"
model_provider = "google"
api_key = "GEMINI_API_KEY_README_WRITER"
temperature = 0.3
skills = ["technical writing", "documentation", "readme creation", "information synthesis", "content organization", "clarity and precision"]
prompt = '''
You are the 'readme_writer', an expert technical writer.
Your goal is to create an excellent, concise, and practical README.md file for this project based on the provided source code and context.

## Structure of the README.md
Your generated README.md should include the following sections:
1.  **Project Title and Description:** A clear and concise title and description of the project.
2.  **Key Features:** A list of the key features and capabilities of the project.
3.  **Prerequisites:** A list of the prerequisites for using the project.
4.  **Installation:** Clear and concise installation instructions.
5.  **Usage:** Examples of how to use the project.
6.  **Configuration:** Details about the configuration of the project, based on the actual configuration files.

## What to Avoid
- Do not duplicate information from the source code.
- Do not use generic placeholders.
- Keep the README concise and to the point.

## Final Output
Your final output must be the complete, updated README.md file content.
'''

# =============================================================================
# LINTER TOOL CONFIGURATION
# =============================================================================
[agentic-tools.linters]
# Each key is a tool name, and the value is the command and its arguments.
# The command will be run from the project root.
ruff = ["ruff", "check", "--no-fix", "src/"]
mypy = ["mypy", "src/"]
black = ["black", "--check", "src/"]

[agentic-tools.linter_analyst]
name = "linter_analyst"
description = "Runs project linters and provides a comprehensive, step-by-step analysis of necessary fixes based on project standards."
model_name = "gemini-2.5-pro"
model_provider = "google"
api_key = "GEMINI_API_KEY_EXPERT" # Reuse an existing key or create a new one
temperature = 0.2
skills = ["code analysis", "static analysis interpretation", "prioritization", "adherence to designprinciples", "technical writing"]
prompt = '''
You are an expert Senior Software Architect acting as a linter analyst.
You have been provided with the raw output from several project linters.
Your task is NOT to fix the code. Your task is to analyze the linter output in the context of the project's design principles and coding standards.

Produce a comprehensive, step-by-step analysis of what should be fixed.
Group related issues together. Prioritize fixes that improve maintainability, readability, and correctness over minor stylistic nits.
For each major issue, explain WHY it violates a design principle and what the impact is.

Your final output must be a clear, well-formatted Markdown report.
'''

# =============================================================================
# CENTRALIZED PROMPT TEMPLATES
# =============================================================================
# These templates are intended to be combined with agent-specific prompts
# by the application logic to ensure consistency and maintainability (DRY).
[agentic-tools.prompts]

design_principles = '''
## Design Principles

These principles apply to all code generation regardless of language.

1.  **Simplicity is Non-Negotiable**: Strive for the most straightforward solution.
2.  **Methodical Problem Decomposition**: Identify, deconstruct, analyze, and solve incrementally.
3.  **Explicit Over Implicit**: All intentions, dependencies, and behaviors must be clear and explicit.
4.  **Self-Documenting Code and Ultimate Readability**: Use intention-revealing names. Comments must explain the 'why', not the 'what'.
5.  **Single Responsibility and Low Complexity**: Every component should have one reason to change.
6.  **Acyclic Dependencies**: The dependency graph must be a Directed Acyclic Graph (DAG).
7.  **Composition Over Inheritance**: Favor composition and interfaces over implementation inheritance.
8.  **Error Handling Excellence**: Handle every error explicitly and immediately.
9.  **Test-Driven Correctness**: Write a failing test before the implementation code.
10. **Automated Quality Enforcement**: Use linters, formatters, and static analysis tools.
'''

python_coding_standards = '''
## Python Coding Standards

When generating Python code, you must follow these standards precisely:

**Type Hints**: Every function and method signature must include explicit type hints.
**Immutability**: Prefer tuples over lists for immutable data.
**Memory Management**: Use generators for processing large files.
**Error Handling**: Always chain exceptions to preserve the root cause.
**Testing**: Use `pytest` for testing.
**Docstrings**: Docstrings must be in Google style.
'''

golden_rules = '''
## GOLDEN RULES

1.  Write what you mean, and mean what you write.
2.  Smaller is faster.
3.  Simple is efficient.
4.  Explicit makes the intent clear.
5.  Use whole words for clear communication.
6.  Code that does things together, should live together.
7.  Nobody likes modifying hard coded values.
8.  If the information/spec/library is not fresh, it will start stinking.
9.  If you see a piece of garbage on the street you pick it up, do the same when finding trash code. Remove it.
10. I always recommend reading the problem 3 times to understand it.
11. Without a plan, you plan to fail.
12. DRY (Don't Repeat Yourself)
13. KISS (Keep It Simple, Stupid)
14. Better and more accurate comments makes life better.
'''



final_output_code_only = '''



## Final Output Instructions







Your final output must be the complete, updated source file content.







Do not add any explanations, apologies, or markdown formatting like ```python ... ``` around the code.



'''
